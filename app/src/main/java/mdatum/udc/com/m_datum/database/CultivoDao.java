package mdatum.udc.com.m_datum.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CULTIVO".
*/
public class CultivoDao extends AbstractDao<Cultivo, Long> {

    public static final String TABLENAME = "CULTIVO";

    /**
     * Properties of entity Cultivo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EspecieId = new Property(1, int.class, "especieId", false, "ESPECIE_ID");
        public final static Property TipoId = new Property(2, int.class, "tipoId", false, "TIPO_ID");
        public final static Property NroSiembra = new Property(3, int.class, "nroSiembra", false, "NRO_SIEMBRA");
        public final static Property MesSiembra = new Property(4, int.class, "mesSiembra", false, "MES_SIEMBRA");
        public final static Property Surcos = new Property(5, int.class, "surcos", false, "SURCOS");
        public final static Property Distancias = new Property(6, int.class, "distancias", false, "DISTANCIAS");
        public final static Property Largo = new Property(7, int.class, "largo", false, "LARGO");
        public final static Property TipoProduccionId = new Property(8, int.class, "tipoProduccionId", false, "TIPO_PRODUCCION_ID");
        public final static Property EleccionCultivoId = new Property(9, int.class, "eleccionCultivoId", false, "ELECCION_CULTIVO_ID");
        public final static Property EleccionEspecificar = new Property(10, String.class, "eleccionEspecificar", false, "ELECCION_ESPECIFICAR");
        public final static Property EncuestaId = new Property(11, Long.class, "encuestaId", false, "ENCUESTA_ID");
        public final static Property Nueva_especie = new Property(12, String.class, "nueva_especie", false, "NUEVA_ESPECIE");
    }

    private Query<Cultivo> encuesta_CultivosQuery;

    public CultivoDao(DaoConfig config) {
        super(config);
    }
    
    public CultivoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CULTIVO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ESPECIE_ID\" INTEGER NOT NULL ," + // 1: especieId
                "\"TIPO_ID\" INTEGER NOT NULL ," + // 2: tipoId
                "\"NRO_SIEMBRA\" INTEGER NOT NULL ," + // 3: nroSiembra
                "\"MES_SIEMBRA\" INTEGER NOT NULL ," + // 4: mesSiembra
                "\"SURCOS\" INTEGER NOT NULL ," + // 5: surcos
                "\"DISTANCIAS\" INTEGER NOT NULL ," + // 6: distancias
                "\"LARGO\" INTEGER NOT NULL ," + // 7: largo
                "\"TIPO_PRODUCCION_ID\" INTEGER NOT NULL ," + // 8: tipoProduccionId
                "\"ELECCION_CULTIVO_ID\" INTEGER NOT NULL ," + // 9: eleccionCultivoId
                "\"ELECCION_ESPECIFICAR\" TEXT," + // 10: eleccionEspecificar
                "\"ENCUESTA_ID\" INTEGER," + // 11: encuestaId
                "\"NUEVA_ESPECIE\" TEXT);"); // 12: nueva_especie
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CULTIVO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cultivo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEspecieId());
        stmt.bindLong(3, entity.getTipoId());
        stmt.bindLong(4, entity.getNroSiembra());
        stmt.bindLong(5, entity.getMesSiembra());
        stmt.bindLong(6, entity.getSurcos());
        stmt.bindLong(7, entity.getDistancias());
        stmt.bindLong(8, entity.getLargo());
        stmt.bindLong(9, entity.getTipoProduccionId());
        stmt.bindLong(10, entity.getEleccionCultivoId());
 
        String eleccionEspecificar = entity.getEleccionEspecificar();
        if (eleccionEspecificar != null) {
            stmt.bindString(11, eleccionEspecificar);
        }
 
        Long encuestaId = entity.getEncuestaId();
        if (encuestaId != null) {
            stmt.bindLong(12, encuestaId);
        }
 
        String nueva_especie = entity.getNueva_especie();
        if (nueva_especie != null) {
            stmt.bindString(13, nueva_especie);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cultivo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEspecieId());
        stmt.bindLong(3, entity.getTipoId());
        stmt.bindLong(4, entity.getNroSiembra());
        stmt.bindLong(5, entity.getMesSiembra());
        stmt.bindLong(6, entity.getSurcos());
        stmt.bindLong(7, entity.getDistancias());
        stmt.bindLong(8, entity.getLargo());
        stmt.bindLong(9, entity.getTipoProduccionId());
        stmt.bindLong(10, entity.getEleccionCultivoId());
 
        String eleccionEspecificar = entity.getEleccionEspecificar();
        if (eleccionEspecificar != null) {
            stmt.bindString(11, eleccionEspecificar);
        }
 
        Long encuestaId = entity.getEncuestaId();
        if (encuestaId != null) {
            stmt.bindLong(12, encuestaId);
        }
 
        String nueva_especie = entity.getNueva_especie();
        if (nueva_especie != null) {
            stmt.bindString(13, nueva_especie);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cultivo readEntity(Cursor cursor, int offset) {
        Cultivo entity = new Cultivo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // especieId
            cursor.getInt(offset + 2), // tipoId
            cursor.getInt(offset + 3), // nroSiembra
            cursor.getInt(offset + 4), // mesSiembra
            cursor.getInt(offset + 5), // surcos
            cursor.getInt(offset + 6), // distancias
            cursor.getInt(offset + 7), // largo
            cursor.getInt(offset + 8), // tipoProduccionId
            cursor.getInt(offset + 9), // eleccionCultivoId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // eleccionEspecificar
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // encuestaId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // nueva_especie
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cultivo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEspecieId(cursor.getInt(offset + 1));
        entity.setTipoId(cursor.getInt(offset + 2));
        entity.setNroSiembra(cursor.getInt(offset + 3));
        entity.setMesSiembra(cursor.getInt(offset + 4));
        entity.setSurcos(cursor.getInt(offset + 5));
        entity.setDistancias(cursor.getInt(offset + 6));
        entity.setLargo(cursor.getInt(offset + 7));
        entity.setTipoProduccionId(cursor.getInt(offset + 8));
        entity.setEleccionCultivoId(cursor.getInt(offset + 9));
        entity.setEleccionEspecificar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEncuestaId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setNueva_especie(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cultivo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cultivo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cultivo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cultivos" to-many relationship of Encuesta. */
    public List<Cultivo> _queryEncuesta_Cultivos(Long encuestaId) {
        synchronized (this) {
            if (encuesta_CultivosQuery == null) {
                QueryBuilder<Cultivo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EncuestaId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                encuesta_CultivosQuery = queryBuilder.build();
            }
        }
        Query<Cultivo> query = encuesta_CultivosQuery.forCurrentThread();
        query.setParameter(0, encuestaId);
        return query.list();
    }

}
