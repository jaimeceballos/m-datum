package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AGROQUIMICO_USADO".
*/
public class AgroquimicoUsadoDao extends AbstractDao<AgroquimicoUsado, Long> {

    public static final String TABLENAME = "AGROQUIMICO_USADO";

    /**
     * Properties of entity AgroquimicoUsado.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Producto = new Property(1, String.class, "producto", false, "PRODUCTO");
        public final static Property Plaga = new Property(2, String.class, "plaga", false, "PLAGA");
        public final static Property Metodo_aplicacion = new Property(3, String.class, "metodo_aplicacion", false, "METODO_APLICACION");
        public final static Property Frecuencia_uso = new Property(4, String.class, "frecuencia_uso", false, "FRECUENCIA_USO");
        public final static Property EncuestaId = new Property(5, Long.class, "encuestaId", false, "ENCUESTA_ID");
    }


    public AgroquimicoUsadoDao(DaoConfig config) {
        super(config);
    }
    
    public AgroquimicoUsadoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGROQUIMICO_USADO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCTO\" TEXT," + // 1: producto
                "\"PLAGA\" TEXT," + // 2: plaga
                "\"METODO_APLICACION\" TEXT," + // 3: metodo_aplicacion
                "\"FRECUENCIA_USO\" TEXT," + // 4: frecuencia_uso
                "\"ENCUESTA_ID\" INTEGER);"); // 5: encuestaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGROQUIMICO_USADO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AgroquimicoUsado entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String producto = entity.getProducto();
        if (producto != null) {
            stmt.bindString(2, producto);
        }
 
        String plaga = entity.getPlaga();
        if (plaga != null) {
            stmt.bindString(3, plaga);
        }
 
        String metodo_aplicacion = entity.getMetodo_aplicacion();
        if (metodo_aplicacion != null) {
            stmt.bindString(4, metodo_aplicacion);
        }
 
        String frecuencia_uso = entity.getFrecuencia_uso();
        if (frecuencia_uso != null) {
            stmt.bindString(5, frecuencia_uso);
        }
 
        Long encuestaId = entity.getEncuestaId();
        if (encuestaId != null) {
            stmt.bindLong(6, encuestaId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AgroquimicoUsado entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String producto = entity.getProducto();
        if (producto != null) {
            stmt.bindString(2, producto);
        }
 
        String plaga = entity.getPlaga();
        if (plaga != null) {
            stmt.bindString(3, plaga);
        }
 
        String metodo_aplicacion = entity.getMetodo_aplicacion();
        if (metodo_aplicacion != null) {
            stmt.bindString(4, metodo_aplicacion);
        }
 
        String frecuencia_uso = entity.getFrecuencia_uso();
        if (frecuencia_uso != null) {
            stmt.bindString(5, frecuencia_uso);
        }
 
        Long encuestaId = entity.getEncuestaId();
        if (encuestaId != null) {
            stmt.bindLong(6, encuestaId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AgroquimicoUsado readEntity(Cursor cursor, int offset) {
        AgroquimicoUsado entity = new AgroquimicoUsado( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // producto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // plaga
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // metodo_aplicacion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // frecuencia_uso
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // encuestaId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AgroquimicoUsado entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProducto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlaga(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMetodo_aplicacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrecuencia_uso(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEncuestaId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AgroquimicoUsado entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AgroquimicoUsado entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AgroquimicoUsado entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
