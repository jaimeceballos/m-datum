package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENCUESTA".
*/
public class EncuestaDao extends AbstractDao<Encuesta, Long> {

    public static final String TABLENAME = "ENCUESTA";

    /**
     * Properties of entity Encuesta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EstablecimientoId = new Property(1, Long.class, "establecimientoId", false, "ESTABLECIMIENTO_ID");
        public final static Property EncuestadoId = new Property(2, Long.class, "encuestadoId", false, "ENCUESTADO_ID");
        public final static Property FamiliaId = new Property(3, Long.class, "familiaId", false, "FAMILIA_ID");
        public final static Property AgroquimicoId = new Property(4, Long.class, "agroquimicoId", false, "AGROQUIMICO_ID");
        public final static Property Fecha = new Property(5, java.util.Date.class, "fecha", false, "FECHA");
    }


    public EncuestaDao(DaoConfig config) {
        super(config);
    }
    
    public EncuestaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENCUESTA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ESTABLECIMIENTO_ID\" INTEGER," + // 1: establecimientoId
                "\"ENCUESTADO_ID\" INTEGER," + // 2: encuestadoId
                "\"FAMILIA_ID\" INTEGER," + // 3: familiaId
                "\"AGROQUIMICO_ID\" INTEGER," + // 4: agroquimicoId
                "\"FECHA\" INTEGER);"); // 5: fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENCUESTA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Encuesta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long establecimientoId = entity.getEstablecimientoId();
        if (establecimientoId != null) {
            stmt.bindLong(2, establecimientoId);
        }
 
        Long encuestadoId = entity.getEncuestadoId();
        if (encuestadoId != null) {
            stmt.bindLong(3, encuestadoId);
        }
 
        Long familiaId = entity.getFamiliaId();
        if (familiaId != null) {
            stmt.bindLong(4, familiaId);
        }
 
        Long agroquimicoId = entity.getAgroquimicoId();
        if (agroquimicoId != null) {
            stmt.bindLong(5, agroquimicoId);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(6, fecha.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Encuesta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long establecimientoId = entity.getEstablecimientoId();
        if (establecimientoId != null) {
            stmt.bindLong(2, establecimientoId);
        }
 
        Long encuestadoId = entity.getEncuestadoId();
        if (encuestadoId != null) {
            stmt.bindLong(3, encuestadoId);
        }
 
        Long familiaId = entity.getFamiliaId();
        if (familiaId != null) {
            stmt.bindLong(4, familiaId);
        }
 
        Long agroquimicoId = entity.getAgroquimicoId();
        if (agroquimicoId != null) {
            stmt.bindLong(5, agroquimicoId);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(6, fecha.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Encuesta readEntity(Cursor cursor, int offset) {
        Encuesta entity = new Encuesta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // establecimientoId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // encuestadoId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // familiaId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // agroquimicoId
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // fecha
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Encuesta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEstablecimientoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEncuestadoId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFamiliaId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAgroquimicoId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFecha(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Encuesta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Encuesta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Encuesta entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
