package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPDATES_TO_SERVER".
*/
public class UpdatesToServerDao extends AbstractDao<UpdatesToServer, Long> {

    public static final String TABLENAME = "UPDATES_TO_SERVER";

    /**
     * Properties of entity UpdatesToServer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Entidad = new Property(1, String.class, "entidad", false, "ENTIDAD");
        public final static Property Valor = new Property(2, String.class, "valor", false, "VALOR");
        public final static Property Usuario = new Property(3, int.class, "usuario", false, "USUARIO");
        public final static Property Sincronized = new Property(4, boolean.class, "sincronized", false, "SINCRONIZED");
    }


    public UpdatesToServerDao(DaoConfig config) {
        super(config);
    }
    
    public UpdatesToServerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPDATES_TO_SERVER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ENTIDAD\" TEXT," + // 1: entidad
                "\"VALOR\" TEXT," + // 2: valor
                "\"USUARIO\" INTEGER NOT NULL ," + // 3: usuario
                "\"SINCRONIZED\" INTEGER NOT NULL );"); // 4: sincronized
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPDATES_TO_SERVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpdatesToServer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String entidad = entity.getEntidad();
        if (entidad != null) {
            stmt.bindString(2, entidad);
        }
 
        String valor = entity.getValor();
        if (valor != null) {
            stmt.bindString(3, valor);
        }
        stmt.bindLong(4, entity.getUsuario());
        stmt.bindLong(5, entity.getSincronized() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpdatesToServer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String entidad = entity.getEntidad();
        if (entidad != null) {
            stmt.bindString(2, entidad);
        }
 
        String valor = entity.getValor();
        if (valor != null) {
            stmt.bindString(3, valor);
        }
        stmt.bindLong(4, entity.getUsuario());
        stmt.bindLong(5, entity.getSincronized() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UpdatesToServer readEntity(Cursor cursor, int offset) {
        UpdatesToServer entity = new UpdatesToServer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // entidad
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // valor
            cursor.getInt(offset + 3), // usuario
            cursor.getShort(offset + 4) != 0 // sincronized
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpdatesToServer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntidad(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsuario(cursor.getInt(offset + 3));
        entity.setSincronized(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UpdatesToServer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UpdatesToServer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UpdatesToServer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
