package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AGROQUIMICOS".
*/
public class AgroquimicosDao extends AbstractDao<Agroquimicos, Long> {

    public static final String TABLENAME = "AGROQUIMICOS";

    /**
     * Properties of entity Agroquimicos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Usa = new Property(1, boolean.class, "usa", false, "USA");
        public final static Property Razon_no = new Property(2, String.class, "razon_no", false, "RAZON_NO");
        public final static Property Tiempo_usa = new Property(3, int.class, "tiempo_usa", false, "TIEMPO_USA");
        public final static Property Factor_climatico = new Property(4, Long.class, "factor_climatico", false, "FACTOR_CLIMATICO");
        public final static Property Triple_lavado = new Property(5, Long.class, "triple_lavado", false, "TRIPLE_LAVADO");
        public final static Property Asesoramiento = new Property(6, Long.class, "asesoramiento", false, "ASESORAMIENTO");
        public final static Property Asesoramiento_otro = new Property(7, String.class, "asesoramiento_otro", false, "ASESORAMIENTO_OTRO");
    }


    public AgroquimicosDao(DaoConfig config) {
        super(config);
    }
    
    public AgroquimicosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGROQUIMICOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USA\" INTEGER NOT NULL ," + // 1: usa
                "\"RAZON_NO\" TEXT," + // 2: razon_no
                "\"TIEMPO_USA\" INTEGER NOT NULL ," + // 3: tiempo_usa
                "\"FACTOR_CLIMATICO\" INTEGER," + // 4: factor_climatico
                "\"TRIPLE_LAVADO\" INTEGER," + // 5: triple_lavado
                "\"ASESORAMIENTO\" INTEGER," + // 6: asesoramiento
                "\"ASESORAMIENTO_OTRO\" TEXT);"); // 7: asesoramiento_otro
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGROQUIMICOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Agroquimicos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUsa() ? 1L: 0L);
 
        String razon_no = entity.getRazon_no();
        if (razon_no != null) {
            stmt.bindString(3, razon_no);
        }
        stmt.bindLong(4, entity.getTiempo_usa());
 
        Long factor_climatico = entity.getFactor_climatico();
        if (factor_climatico != null) {
            stmt.bindLong(5, factor_climatico);
        }
 
        Long triple_lavado = entity.getTriple_lavado();
        if (triple_lavado != null) {
            stmt.bindLong(6, triple_lavado);
        }
 
        Long asesoramiento = entity.getAsesoramiento();
        if (asesoramiento != null) {
            stmt.bindLong(7, asesoramiento);
        }
 
        String asesoramiento_otro = entity.getAsesoramiento_otro();
        if (asesoramiento_otro != null) {
            stmt.bindString(8, asesoramiento_otro);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Agroquimicos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUsa() ? 1L: 0L);
 
        String razon_no = entity.getRazon_no();
        if (razon_no != null) {
            stmt.bindString(3, razon_no);
        }
        stmt.bindLong(4, entity.getTiempo_usa());
 
        Long factor_climatico = entity.getFactor_climatico();
        if (factor_climatico != null) {
            stmt.bindLong(5, factor_climatico);
        }
 
        Long triple_lavado = entity.getTriple_lavado();
        if (triple_lavado != null) {
            stmt.bindLong(6, triple_lavado);
        }
 
        Long asesoramiento = entity.getAsesoramiento();
        if (asesoramiento != null) {
            stmt.bindLong(7, asesoramiento);
        }
 
        String asesoramiento_otro = entity.getAsesoramiento_otro();
        if (asesoramiento_otro != null) {
            stmt.bindString(8, asesoramiento_otro);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Agroquimicos readEntity(Cursor cursor, int offset) {
        Agroquimicos entity = new Agroquimicos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // usa
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // razon_no
            cursor.getInt(offset + 3), // tiempo_usa
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // factor_climatico
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // triple_lavado
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // asesoramiento
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // asesoramiento_otro
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Agroquimicos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsa(cursor.getShort(offset + 1) != 0);
        entity.setRazon_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTiempo_usa(cursor.getInt(offset + 3));
        entity.setFactor_climatico(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTriple_lavado(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAsesoramiento(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAsesoramiento_otro(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Agroquimicos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Agroquimicos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Agroquimicos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
