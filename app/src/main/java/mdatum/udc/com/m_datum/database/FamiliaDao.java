package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILIA".
*/
public class FamiliaDao extends AbstractDao<Familia, Long> {

    public static final String TABLENAME = "FAMILIA";

    /**
     * Properties of entity Familia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EsCasado = new Property(1, int.class, "esCasado", false, "ES_CASADO");
        public final static Property TieneHijos = new Property(2, int.class, "tieneHijos", false, "TIENE_HIJOS");
        public final static Property CantVarones = new Property(3, int.class, "cantVarones", false, "CANT_VARONES");
        public final static Property CantMujeres = new Property(4, int.class, "cantMujeres", false, "CANT_MUJERES");
    }


    public FamiliaDao(DaoConfig config) {
        super(config);
    }
    
    public FamiliaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ES_CASADO\" INTEGER NOT NULL ," + // 1: esCasado
                "\"TIENE_HIJOS\" INTEGER NOT NULL ," + // 2: tieneHijos
                "\"CANT_VARONES\" INTEGER NOT NULL ," + // 3: cantVarones
                "\"CANT_MUJERES\" INTEGER NOT NULL );"); // 4: cantMujeres
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Familia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEsCasado());
        stmt.bindLong(3, entity.getTieneHijos());
        stmt.bindLong(4, entity.getCantVarones());
        stmt.bindLong(5, entity.getCantMujeres());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Familia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEsCasado());
        stmt.bindLong(3, entity.getTieneHijos());
        stmt.bindLong(4, entity.getCantVarones());
        stmt.bindLong(5, entity.getCantMujeres());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Familia readEntity(Cursor cursor, int offset) {
        Familia entity = new Familia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // esCasado
            cursor.getInt(offset + 2), // tieneHijos
            cursor.getInt(offset + 3), // cantVarones
            cursor.getInt(offset + 4) // cantMujeres
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Familia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEsCasado(cursor.getInt(offset + 1));
        entity.setTieneHijos(cursor.getInt(offset + 2));
        entity.setCantVarones(cursor.getInt(offset + 3));
        entity.setCantMujeres(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Familia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Familia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Familia entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
