package mdatum.udc.com.m_datum.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENCUESTADO".
*/
public class EncuestadoDao extends AbstractDao<Encuestado, Long> {

    public static final String TABLENAME = "ENCUESTADO";

    /**
     * Properties of entity Encuestado.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Apellido = new Property(2, String.class, "apellido", false, "APELLIDO");
        public final static Property Edad = new Property(3, int.class, "edad", false, "EDAD");
        public final static Property NacionalidadId = new Property(4, int.class, "nacionalidadId", false, "NACIONALIDAD_ID");
        public final static Property NivelInstruccionId = new Property(5, int.class, "nivelInstruccionId", false, "NIVEL_INSTRUCCION_ID");
        public final static Property NivelCompleto = new Property(6, Boolean.class, "nivelCompleto", false, "NIVEL_COMPLETO");
        public final static Property ViveEstablecimiento = new Property(7, Boolean.class, "viveEstablecimiento", false, "VIVE_ESTABLECIMIENTO");
        public final static Property RemoteId = new Property(8, int.class, "remoteId", false, "REMOTE_ID");
        public final static Property IsSinchronized = new Property(9, boolean.class, "isSinchronized", false, "IS_SINCHRONIZED");
    }


    public EncuestadoDao(DaoConfig config) {
        super(config);
    }
    
    public EncuestadoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENCUESTADO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"APELLIDO\" TEXT," + // 2: apellido
                "\"EDAD\" INTEGER NOT NULL ," + // 3: edad
                "\"NACIONALIDAD_ID\" INTEGER NOT NULL ," + // 4: nacionalidadId
                "\"NIVEL_INSTRUCCION_ID\" INTEGER NOT NULL ," + // 5: nivelInstruccionId
                "\"NIVEL_COMPLETO\" INTEGER," + // 6: nivelCompleto
                "\"VIVE_ESTABLECIMIENTO\" INTEGER," + // 7: viveEstablecimiento
                "\"REMOTE_ID\" INTEGER NOT NULL ," + // 8: remoteId
                "\"IS_SINCHRONIZED\" INTEGER NOT NULL );"); // 9: isSinchronized
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENCUESTADO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Encuestado entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String apellido = entity.getApellido();
        if (apellido != null) {
            stmt.bindString(3, apellido);
        }
        stmt.bindLong(4, entity.getEdad());
        stmt.bindLong(5, entity.getNacionalidadId());
        stmt.bindLong(6, entity.getNivelInstruccionId());
 
        Boolean nivelCompleto = entity.getNivelCompleto();
        if (nivelCompleto != null) {
            stmt.bindLong(7, nivelCompleto ? 1L: 0L);
        }
 
        Boolean viveEstablecimiento = entity.getViveEstablecimiento();
        if (viveEstablecimiento != null) {
            stmt.bindLong(8, viveEstablecimiento ? 1L: 0L);
        }
        stmt.bindLong(9, entity.getRemoteId());
        stmt.bindLong(10, entity.getIsSinchronized() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Encuestado entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String apellido = entity.getApellido();
        if (apellido != null) {
            stmt.bindString(3, apellido);
        }
        stmt.bindLong(4, entity.getEdad());
        stmt.bindLong(5, entity.getNacionalidadId());
        stmt.bindLong(6, entity.getNivelInstruccionId());
 
        Boolean nivelCompleto = entity.getNivelCompleto();
        if (nivelCompleto != null) {
            stmt.bindLong(7, nivelCompleto ? 1L: 0L);
        }
 
        Boolean viveEstablecimiento = entity.getViveEstablecimiento();
        if (viveEstablecimiento != null) {
            stmt.bindLong(8, viveEstablecimiento ? 1L: 0L);
        }
        stmt.bindLong(9, entity.getRemoteId());
        stmt.bindLong(10, entity.getIsSinchronized() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Encuestado readEntity(Cursor cursor, int offset) {
        Encuestado entity = new Encuestado( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apellido
            cursor.getInt(offset + 3), // edad
            cursor.getInt(offset + 4), // nacionalidadId
            cursor.getInt(offset + 5), // nivelInstruccionId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // nivelCompleto
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // viveEstablecimiento
            cursor.getInt(offset + 8), // remoteId
            cursor.getShort(offset + 9) != 0 // isSinchronized
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Encuestado entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApellido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEdad(cursor.getInt(offset + 3));
        entity.setNacionalidadId(cursor.getInt(offset + 4));
        entity.setNivelInstruccionId(cursor.getInt(offset + 5));
        entity.setNivelCompleto(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setViveEstablecimiento(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setRemoteId(cursor.getInt(offset + 8));
        entity.setIsSinchronized(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Encuestado entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Encuestado entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Encuestado entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
