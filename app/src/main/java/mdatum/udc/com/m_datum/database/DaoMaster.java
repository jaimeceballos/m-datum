package mdatum.udc.com.m_datum.database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AgroquimicosDao.createTable(db, ifNotExists);
        AgroquimicoUsadoDao.createTable(db, ifNotExists);
        AnioEstructuraDao.createTable(db, ifNotExists);
        AsesoramientoDao.createTable(db, ifNotExists);
        CultivoDao.createTable(db, ifNotExists);
        EleccionCultivoDao.createTable(db, ifNotExists);
        EncuestaDao.createTable(db, ifNotExists);
        EncuestaAgroquimicoUsadoDao.createTable(db, ifNotExists);
        EncuestaCultivoDao.createTable(db, ifNotExists);
        EncuestadoDao.createTable(db, ifNotExists);
        EncuestaInvernaculoDao.createTable(db, ifNotExists);
        EspecieDao.createTable(db, ifNotExists);
        EstablecimientoDao.createTable(db, ifNotExists);
        FactorClimaticoDao.createTable(db, ifNotExists);
        FamiliaDao.createTable(db, ifNotExists);
        InvernaculoDao.createTable(db, ifNotExists);
        MaterialEstructuraDao.createTable(db, ifNotExists);
        NacionalidadDao.createTable(db, ifNotExists);
        NivelInstruccionDao.createTable(db, ifNotExists);
        RegimenTenenciaDao.createTable(db, ifNotExists);
        TipoCultivoDao.createTable(db, ifNotExists);
        TipoProduccionDao.createTable(db, ifNotExists);
        TripleLavadoDao.createTable(db, ifNotExists);
<<<<<<< HEAD
=======
        AgroquimicosDao.createTable(db, ifNotExists);
        EncuestaDao.createTable(db, ifNotExists);
        AgroquimicoUsadoDao.createTable(db, ifNotExists);
>>>>>>> 9a9694f912ef532573a77e2fd075b20c8e19bde9
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AgroquimicosDao.dropTable(db, ifExists);
        AgroquimicoUsadoDao.dropTable(db, ifExists);
        AnioEstructuraDao.dropTable(db, ifExists);
        AsesoramientoDao.dropTable(db, ifExists);
        CultivoDao.dropTable(db, ifExists);
        EleccionCultivoDao.dropTable(db, ifExists);
        EncuestaDao.dropTable(db, ifExists);
        EncuestaAgroquimicoUsadoDao.dropTable(db, ifExists);
        EncuestaCultivoDao.dropTable(db, ifExists);
        EncuestadoDao.dropTable(db, ifExists);
        EncuestaInvernaculoDao.dropTable(db, ifExists);
        EspecieDao.dropTable(db, ifExists);
        EstablecimientoDao.dropTable(db, ifExists);
        FactorClimaticoDao.dropTable(db, ifExists);
        FamiliaDao.dropTable(db, ifExists);
        InvernaculoDao.dropTable(db, ifExists);
        MaterialEstructuraDao.dropTable(db, ifExists);
        NacionalidadDao.dropTable(db, ifExists);
        NivelInstruccionDao.dropTable(db, ifExists);
        RegimenTenenciaDao.dropTable(db, ifExists);
        TipoCultivoDao.dropTable(db, ifExists);
        TipoProduccionDao.dropTable(db, ifExists);
        TripleLavadoDao.dropTable(db, ifExists);
<<<<<<< HEAD
=======
        AgroquimicosDao.dropTable(db, ifExists);
        EncuestaDao.dropTable(db, ifExists);
        AgroquimicoUsadoDao.dropTable(db, ifExists);
>>>>>>> 9a9694f912ef532573a77e2fd075b20c8e19bde9
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AgroquimicosDao.class);
        registerDaoClass(AgroquimicoUsadoDao.class);
        registerDaoClass(AnioEstructuraDao.class);
        registerDaoClass(AsesoramientoDao.class);
        registerDaoClass(CultivoDao.class);
        registerDaoClass(EleccionCultivoDao.class);
        registerDaoClass(EncuestaDao.class);
        registerDaoClass(EncuestaAgroquimicoUsadoDao.class);
        registerDaoClass(EncuestaCultivoDao.class);
        registerDaoClass(EncuestadoDao.class);
        registerDaoClass(EncuestaInvernaculoDao.class);
        registerDaoClass(EspecieDao.class);
        registerDaoClass(EstablecimientoDao.class);
        registerDaoClass(FactorClimaticoDao.class);
        registerDaoClass(FamiliaDao.class);
        registerDaoClass(InvernaculoDao.class);
        registerDaoClass(MaterialEstructuraDao.class);
        registerDaoClass(NacionalidadDao.class);
        registerDaoClass(NivelInstruccionDao.class);
        registerDaoClass(RegimenTenenciaDao.class);
        registerDaoClass(TipoCultivoDao.class);
        registerDaoClass(TipoProduccionDao.class);
        registerDaoClass(TripleLavadoDao.class);
<<<<<<< HEAD
=======
        registerDaoClass(AgroquimicosDao.class);
        registerDaoClass(EncuestaDao.class);
        registerDaoClass(AgroquimicoUsadoDao.class);
>>>>>>> 9a9694f912ef532573a77e2fd075b20c8e19bde9
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
